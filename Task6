package sample1;

import java.util.Scanner;

class LinkedList {
    // Node class
    class Node {
        int data;
        Node next;

        public Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    private Node head;

    // Method to add a node to the linked list
    public void addNode(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }
        Node temp = head;
        while (temp.next != null) {
            temp = temp.next;
        }
        temp.next = newNode;
    }

    // Method to create a cycle (used for testing)
    public void createCycle(int position) {
        if (head == null || position < 1) return;

        Node temp = head, cycleNode = null;
        int count = 1;

        // Find the node at the given position
        while (temp.next != null) {
            if (count == position) {
                cycleNode = temp;
            }
            temp = temp.next;
            count++;
        }

        // Create a cycle by pointing the last node to the cycleNode
        if (cycleNode != null) {
            temp.next = cycleNode;
        }
    }

    // Detects if the linked list has a cycle using Floydâ€™s Tortoise and Hare algorithm
    public boolean hasCycle(Node head) {
        if (head == null) return false;

        Node slow = head, fast = head;

        while (fast != null && fast.next != null) {
            slow = slow.next;         // Moves one step
            fast = fast.next.next;    // Moves two steps

            if (slow == fast) {       // Cycle detected
                return true;
            }
        }
        return false;
    }

    public Node getHead() {
        return head;
    }

    public void displayList() {
        Node temp = head;
        System.out.print("Linked List: ");
        while (temp != null) {
            System.out.print(temp.data + " -> ");
            temp = temp.next;
        }
        System.out.println("null");
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        LinkedList list = new LinkedList();

        // User input for linked list creation
        System.out.print("Enter number of nodes: ");
        int n = scanner.nextInt();

        System.out.println("Enter " + n + " values:");
        for (int i = 0; i < n; i++) {
            list.addNode(scanner.nextInt());
        }

        // Display list before cycle creation
        list.displayList();

        // Ask user to create a cycle
        System.out.print("Enter position to create a cycle (0 for no cycle): ");
        int pos = scanner.nextInt();
        if (pos > 0) {
            list.createCycle(pos);
        }

        // Check for cycle
        boolean hasCycle = list.hasCycle(list.getHead());
        if (hasCycle) {
            System.out.println("Cycle detected in the linked list.");
        } else {
            System.out.println("No cycle in the linked list.");
        }

        scanner.close();
    }
}
